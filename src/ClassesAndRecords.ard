\import Basics
\import Data.Maybe
\import Function.Meta
\import Meta
\import Paths
\import Paths.Meta

-- Exercise 1
\record Pair (A B : \Type)
  | fst' : A
  | snd' : B

\func swap {A B : \Type} (p : Pair A B) : Pair B A \cowith
  | fst' => p.snd'
  | snd' => p.fst'

\func swap' {A B : \Type} (p : Pair A B) : Pair B A \elim p
  | (a, b) => \new Pair { | fst' => b | snd' => a }

\func swap'' {A B : \Type} (p : Pair A B) : Pair B A => \new Pair {
  | fst' => p.snd'
  | snd' => p.fst'
}

-- Exercise 2
\func invSwap {A B : \Type} (p : Pair A B) : swap (swap p) = p => idp


\data Bool | true | false
\data Empty

\data T (b : Bool) \with
  | true => tt

\func isPos (n : Nat) : Bool
  | 0 => false
  | suc _ => true

\record PosNat (n : Nat) (p : T (isPos n))

-- Exercise 3
-- Около нулевое понимание, почему T false не Empty
-- \func PosNat0isEmpty (p : PosNat 0) : Empty => p.p

\func PosNat1NotEmpty : PosNat 1 => \new PosNat {
  | p => tt
}

-- Exercise 4
\func isCoprime (n m : Nat) : Bool => \case (Basics.gcd n m) \with {
  | 1 => true
  | _ => false
}

\record coPrime (n m : Nat) (p : T (isCoprime n m))

\record coPrime60 (n : Nat) (p : T (isCoprime n 60))

\class Functor (F : \Type -> \Type)
  | fmap {A B : \Type} (f : A -> B) : F A -> F B
  | fmap-id {A : \Type} (y : F A) : fmap (\lam (x : A) => x) y = y
  | fmap-comp {A B C : \Type} (f : A -> B) (g : B -> C) (y : F A)
  : fmap (\lam x => g (f x)) y = fmap g (fmap f y)


-- Для монад нужен bind и return и их свойства, как я помню.
\func funExt {A : \Type} (B : A -> \Type) {f g : \Pi (a : A) -> B a}
             (p : \Pi (a : A) -> f a = g a) : f = g
  => path (\lam i => \lam a => p a @ i)

\class Monad \extends Functor {
  | return {A : \Type} : A -> F A
  | bind {A B : \Type} : F A -> (A -> F B) -> F B
  | left-id {A B : \Type} (a : A) (f : A -> F B) : bind (return a) f = f a
  | right-id {A : \Type} (a : F A) : bind a return = a
  | assoc-bind {A B C : \Type} (a : F A) (f : A -> F B) (g : B -> F C)
  : bind (bind a f) g = bind a (\lam x => bind (f x) g)
  -- насколько я понимаю, если переопределить здесь fmap, то не нужно будет определять дальше.
  | fmap f x => bind x (\lam y => return $ f y)
  -- и свойства кажется сразу могу доказать, потому что любая монада является функтором.
  | fmap-id x => right-id x
  -- вот последнее оказалось сложноватым, наверное стоит сначала написать на листочке цепочку
  -- unfold fmap помог доказать, потому что я видел, что доказываю.
  -- но потом я задумался, что определение внутри само раскроется и понял, что можно просто убрать.
  | fmap-comp f g x => inv $
    assoc-bind x (\lam a => return (f a)) (\lam b => return (g b)) *>
    pmap (bind x) (funExt (\lam _ => _) (\lam x => left-id (f x) (\lam y => return (g y))))
}

\instance MaybeMonad : Monad Maybe => \new Monad {
  | return => just
  | bind x f => \case x \with {
    | nothing => nothing
    | just x => f x
  }
  | left-id x f => idp
  | right-id x => \case \elim x \with {
    | nothing => idp
    | just t => idp
  }
  | assoc-bind x f g => \case \elim x \with {
    | nothing => idp
    | just t => idp
  }
}

\record State (S A : \Type)
  | state : S -> \Sigma S A

\data State' (S A : \Type)
  | state' (S -> \Sigma S A)

\instance StateMonad (S : \Type) : Monad (State S) => \new Monad {
  | return x => \new State {
    | state s => (s, x)
  }
  -- не очень понимаю почему нужно явно указывать тип, если я хочу сделать x.state
  | bind {A} {B} (x : State S A) f => \new State {
    | state s => \case x.state s \with {
      | (s1, a) => \let stateB : State S B => f a \in stateB.state s1
    }
  }
  | left-id x f => idp
  | right-id x => idp
  | assoc-bind x f g => idp
}

-- Эта функция мне пригодилась, потому что если внутри bind x f делать \case _ \with,
-- то потом у меня не раскрывались определения в right-id, assoc-bind, что усложняло доказательства.
\func eval {S A : \Type} (st : State' S A) (s : S) : \Sigma S A \elim st
  | state' st => st s

\instance State'Monad (S : \Type) : Monad (State' S) => \new Monad {
  | return x => state' (\lam s => (s, x))
  | bind x f => state' (\lam s => \let (eval_s, eval_x) => eval x s \in eval (f eval_x) eval_s)
  | left-id a f => cases (f a) \with {
    | state' _x => idp
  }
  | right-id x => \case \elim x \with {
    | state' _x => idp
  }
  | assoc-bind x f g => idp
}
